<?php

namespace Tests\Feature;

use App\Student;
use Faker\Factory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class StudentTest extends TestCase
{
    use RefreshDatabase;
    protected $faker;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
    }
    /** @test **/
    public function create_student()
    {
        $this->authenticateAdmin();

        $response = $this->postJson(route('student.store'),
            $this->getStudentData());
        $response->assertStatus(200);
        $this->assertDatabaseCount('students', 1);
    }
    /** @test **/
    public function name_is_required()
    {
        $this->authenticateAdmin();
        $response = $this->post(route('user.register'),
            array_merge($this->getStudentData(),['name'=> '']));
        $response->assertSessionHasErrors('name');
    }
    /** @test **/
    public function email_is_required()
    {
        $this->authenticateAdmin();
        $response = $this->post(route('user.register'),
            array_merge($this->getStudentData(),['email'=> '']));
        $response->assertRedirect();
        $response->assertSessionHasErrors('email');
    }
    /** @test **/
    public function phone_is_required()
    {
        $this->authenticateAdmin();
        $response = $this->post(route('user.register'),
            array_merge($this->getStudentData(),['phone'=> '']));
        $response->assertRedirect();
        $response->assertSessionHasErrors('phone');
    }
    /** @test **/
    public function location_is_required()
    {
        $this->authenticateAdmin();
        $response = $this->post(route('user.register'),
            array_merge($this->getStudentData(),['location'=> '']));
        $response->assertRedirect();
        $response->assertSessionHasErrors('location');
    }
    /** @test **/
    public function admin_update_student_information()
    {
        $this->authenticateAdmin();
        $student = \factory(Student::class)->create();

        $response = $this->putJson(route('student.update', $student->id)
            , array_merge($this->getStudentData(), ['name'=>'King James']));
        $response->assertStatus(200);
        $student = Student::find(1);
        $this->assertEquals($student->name, 'King James');

    }

    private function getStudentData()
    {
        return [
            'name' => $this->faker->firstName . ' ' . $this->faker->lastName,
            'email' => $this->faker->email,
            'phone' => $this->faker->phoneNumber,
            'location' => $this->faker->address
        ];
    }
}
