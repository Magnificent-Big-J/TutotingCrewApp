<?php

namespace Tests\Feature;

use App\Mail\WelcomeAdminMail;
use App\Mail\WelcomeMail;
use App\User;
use Faker\Factory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Mail;
use Tests\TestCase;


class RegistrationTest extends TestCase
{
    use RefreshDatabase;

    protected $faker;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = Factory::create();
    }

    /** @test **/
    public function can_create_an_admin_user()
    {
        $this->authenticateAdmin();

        $response = $this->post(route('user.register'),
            array_merge($this->getUserRegistrationData(),['type'=>1]));
        $response->assertStatus(200);
        $this->assertDatabaseCount('users', 2);

        $user = User::find(2);
        $this->assertTrue($user->hasRole('Admin'));
        $response->assertSessionHas('success', 'User is successfully created.');
    }
    /** @test **/
    public function can_admin_create_tutor()
    {
        $this->authenticateAdmin();
        $response = $this->post(route('user.register'),
            array_merge($this->getUserRegistrationData(),['type'=>2]));
        $response->assertStatus(200);
        $this->assertDatabaseCount('users', 2);
        $user = User::find(2);
        $this->assertTrue($user->hasRole('Junior'));
        $response->assertSessionHas('success', 'User is successfully created.');
    }
    /** @test */
    public function an_email_is_sent_to_newly_registered_users()
    {
        Mail::fake();
        $this->authenticateAdmin();
        $type = rand(1,5);
        $response = $this->post(route('user.register'),
            array_merge($this->getUserRegistrationData(),['type'=> $type]));
        $response->assertStatus(200);
        $this->assertDatabaseCount('users', 2);

        if ($type > 1) {
            Mail::assertSent(WelcomeMail::class);
        } else {
            Mail::assertSent(WelcomeAdminMail::class);
        }
    }
    /** @test **/
    public function name_is_required()
    {
        $this->authenticateAdmin();
        $type = rand(1,5);
        $response = $this->post(route('user.register'),
            array_merge($this->getUserRegistrationData(),['type'=> $type, 'name'=> '']));
        $response->assertSessionHasErrors('name');
    }
    /** @test **/
    public function email_is_required()
    {
        $this->authenticateAdmin();
        $type = rand(1,5);
        $response = $this->post(route('user.register'),
            array_merge($this->getUserRegistrationData(),['type'=> $type, 'email'=> '']));
        $response->assertRedirect();
        $response->assertSessionHasErrors('email');
    }
    /** @test **/
    public function phone_is_required()
    {
        $this->authenticateAdmin();
        $type = rand(1,5);
        $response = $this->post(route('user.register'),
            array_merge($this->getUserRegistrationData(),['type'=> $type, 'phone'=> '']));
        $response->assertRedirect();
        $response->assertSessionHasErrors('phone');
    }
    /** @test **/
    public function location_is_required()
    {
        $this->authenticateAdmin();
        $type = rand(1,5);
        $response = $this->post(route('user.register'),
            array_merge($this->getUserRegistrationData(),['type'=> $type, 'location'=> '']));
        $response->assertRedirect();
        $response->assertSessionHasErrors('location');
    }
    /** @test **/
    public function password_is_required()
    {
        $this->authenticateAdmin();
        $type = rand(1,5);
        $response = $this->post(route('user.register'),
            array_merge($this->getUserRegistrationData(),['type'=> $type, 'password'=> '']));
        $response->assertRedirect();
        $response->assertSessionHasErrors('password');
    }
    private function getUserRegistrationData()
    {
        return [
            'name' => $this->faker->firstName . ' ' . $this->faker->lastName,
            'email' => $this->faker->email,
            'password' => bcrypt('password'),
            'phone' => $this->faker->phoneNumber,
            'location' => $this->faker->address
        ];
    }
}
